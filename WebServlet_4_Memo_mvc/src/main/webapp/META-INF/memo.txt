원칙) Model2 기반의 MVC 패턴 사용 프로젝트
Model  (DTO , DAO)  >> java
View (JSP)
Controller(Servlet)  >> 관리 

----------------------------
JSP 없던 시절 >> Servlet 있어요
지금 servlet 연습 ...
JSP 파일 사용하지 않고 DB작업 (servlet 가지고 웹 서비스 )

create table memo(
	id varchar2(15) not null,
	email varchar2(20) not null,
	content varchar2(100)
);

DB 작업 : ojdbc6.jar 파일 


웹 경로

 [ jsp 파일 ]
 
 <h3>GET 방식 요청</h3>
	<a href="<%= request.getContextPath()%>/Login.do?id=hong">로그인</a>
	<hr>
	<h3>POST 방식 요청</h3>
	<form action="<%=request.getContextPath()%>/Login.do" method="post">
		<input type="text" name="id">
		<input type="submit" value="로그인">	
</form>
 
>>>>> http://192.168.0.57:8090/WebServlet/Login.do?id=hong 
 
 
[**** html ***** ] 원칙적으로 서버요청 경로에  / 붙이지 않는다

1. <a href="/MemoList">목록보기</a>   >>>>   localhost:8090/MemoList

 
2. <a href="MemoList">목록보기</a>    >>>>   localhost:8090/WebServlet_3/MemoList


3. <a href="/member/MemoList">목록보기</a> >>>> localhost:8090/member/MemoList

4. <a href="member/MemoList">목록보기</a>  >>>> localhost:8090/WebServlet_3/member/MemoList

5.
JSP
<form name="f" action="/MemoServlet" method="get">  localhost:8090/MemoServlet

HTML
<form name="f" action="MemoServlet" method="get">  localhost:8090/WebServlet_3/MemoServlet

========================================================================================

Model2 기반의  MVC 패턴 웹 프로젝트

1. DB Table 기존 그대로

2. Model : 순수한 Java 파일 (POJO) :DTO 데이터를 담을 수 있는 클래스 (객체지향) : DTO , VO ,DOMAIN
                                   생성방법 : DB에 있는 테이블의 데이터를 담는다 
                                           >> Table 동일한 스키마를 동일하게 만든다 
                                           >> Memo 테이블과 같은 구조를 같는 class 생성
                                           >> 테이블과 1:1 매핑
                                           
                                : DAO (Data Access Object) >> DB연결 > CRUD 작업을 할 수 있는 함수 가지는 클래스
                                           >> 함수는 > 전체조회 , 조건조회 , insert , update , delete 작업    
                                                 
								: SERVICE : Controller 와 DAO 간의 연결고리 (중간 통신)

3. View   : JSP (EL & JSTL) > 객체(request, response , session , application)


4. Controller  : servlet 만든 파일 (모든 요청의 중심) 경찰서 112 상황실의 역할
>> FrontController 1개 생성 또는 여러개 생성 둘다맞아요  > 모든 요청 처리 > cmd , url


>>지금연습
요청당 servlet 생성해서 별도 처리

>>글쓰기 (write.do)    >> @WebServlet("/write.do")  >> 여기서 글쓰기 처리
>>글목록보기 (list.do)  >> @WebServlet("/list.do")   >> 여기서 목록보기 처리


------------------------------------------------------------
하나의 servlet 이 (글쓰기 (write.do) , 글목록보기 (list.do) ) 도 처리하면





















